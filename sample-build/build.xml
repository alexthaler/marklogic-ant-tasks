<?xml version="1.0" encoding="UTF-8"?>
<!--
  MarkLogic Build Starter Application
  
  Provides a common framework for developing/deploying applications using MarkLogic.  
  It also showcases the Marklogic Ant Tasks Project that support a suite of tools found commonly in 
  a developers MarkLogic Toolbox.
  
  Marklogic Ant Tasks ties multiple MarkLogic toolkits together including the following:
 
  &lt;load/&gt;         - Provides ability to load content from various folders allowing setting default permissions and collections.
  &lt;delete/&gt;       - Provides ability to delete content from databases 
  &lt;query/&gt;        - Provides executing ad-hoc queries or executing a batch of xquery files from the filesystem
  &lt;invoke/&gt;       - Provides executing invoke queries against MarkLogic databases.
  &lt;spawn/&gt;        - Provides executing spawn queries against MarkLogic database.
  
  &lt;corb/&gt;         - (Experimental)Provides the ability to execute Corb tasks, often helpful in migrate settings see tasks migrate.xml
                          Depends on corb.jar and dependencies
  &lt;xqdocs/&gt;     - (Experimental) Provides the ability to run xqdocs against xquery code modules.  
                           This syntax has been adapted to support the ml-1.0 xquery version.
                           Depends on Custom XQDocs code for ML-10 syntax
                           
  Future Tasks will include:
  &lt;recordloader/&gt; - (Future) Provides ability to run recordloader tasks against MarkLogic Database
  &lt;xqsync/&gt;       - (Future) Provides the ability to synchronize multiple MarkLogic Database from a source system
  
  
  Open Source Ant Libraries
  <a href="http://sourceforge.net/projects/fikin-ant-tasks/">Fikin - Provides httpclient tasks</a><br/>
  <a href="http://www.oopsconsultancy.com/software/xmltask">XMLTasks - XML manipulation</a><br/>
  
  Main Contributors:
  @author <a href="gary.vidal@marklogic.com">Gary Vidal</a>
  @author <a href="paxton.hare@marklogic.com">Paxton Hare</a>
  @author <a href="geert.josten@daidalos.nl">Geert Josten</a>
  
  Special Acknowledgements:
  @author <a href="frank.sanders@marklogic.com">Frank Sanders (The starter for ML ANT Tasks)</a>
  @author <a href="frank.snow@marklogic.com">Frank Snow (The Excellent Boostrapping Code)</a>
  @author <a href="michael.blakely@marklogic.com">Should I say any more</a>
  @author <a href="darrin.mcbeath@elsevier.com">XQDocs implementation</a>  
-->
<project name="Marklogic Build Tasks" basedir="." default="about"
    xmlns:ml="http://www.marklogic.com/ant"
    xmlns:dav="antlib:org.apache.webdav.ant">
  <!--Include Any Remote or Migrate Tasks as part of the build-->
    <import file="./remote.xml"/>
  <!--<import file="./migrate.xml"/>-->
  
  
  <!--
    Default Build Properties used to configure system
  -->
  <!-- overrules, optional -->
  <property file="${basedir}/app.properties"/>
  <!-- defaults -->
  <property file="${basedir}/build.properties"/>
  <!--Build Library Directory includes all ant tasks and libraries-->
  <property name="lib-dir" value="${basedir}/lib"/>
  <!--Your XQuery Source Directory-->
  <property name="app.dir"  value="${basedir}/../src"/>
  <!--Content you want to load as part of your application-->
  <property name="content.dir" value="${basedir}/../data/content/"/>
  <!--Location of Bootstrap Configurations-->
  
  
  <property name="config.dir" value="${basedir}/config"/>
  <!--Build Output Artifacts-->
  <property name="output.dir" value="${basedir}/output"/>
  <!--XQuery Source Directory-->
  <property name="xquery.dir" value="${output.dir}/modules"/> 
  <!--GR001 Content Source Directory-->
  <property name="data.dir" value="${basedir}/../data"/>
  <!--GR001 Content Source Directory-->
  <property name="content.output" value="${data.dir}/content"/>
  
  <!--Path Directives-->
  <path id= "project.classpath" >
       <fileset dir= "${lib-dir}" >
           <include name= "**/*.jar" />
       </fileset>
  </path>
  <!--Used for most HTTP tasks and various -->
  <path id= "fikin.classpath" >
       <fileset dir= "${lib-dir}/fikin" >
           <include name= "*.jar" />
       </fileset>
  </path>
  <!--WebDav Targets using Slide WebDav-->
  <path id= "slide.classpath" >
       <fileset dir= "${lib-dir}/slide" >
           <include name= "*.jar" />
       </fileset>
  </path>
  <!--Used for most HTTP tasks and various -->
  <!--path id= "svnkit.classpath" >
    <fileset dir= "${lib-dir}/svnkit" >
      <include name= "*.jar" />
    </fileset>
  </path-->
  <!--Common Tasks used in Build Scripts-->
  <taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="project.classpath"/>
  <taskdef resource="net/sf/fikin/ant/ant.properties" classpathref="fikin.classpath"/>
  <!--typedef resource="org/tigris/subversion/svnant/svnantlib.xml"  classpathref="svnkit.classpath" /-->
  <typedef uri="http://www.marklogic.com/ant" resource="com/marklogic/ant/antlib.xml" classpathref="project.classpath"/>
  <taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask" classpath="${lib-dir}/xmltask.jar"/>
  <taskdef resource="org/apache/webdav/ant/taskdefs.properties" classpathref="slide.classpath"/>
  
  <!--
  =================================================================
  Instructions about running the application.
  If there are any specific build instructions this is a good place
  to add them here. 
  =================================================================
  -->
  <target name="about">
      <echo>USAGE:
  Please select a target 
    ant {env} {target}
    ex.>ant qa build    
  OR
    build-{env} 
    ex.>ant build-local, ant build-qa
      </echo>
  </target>
    <!--
      Environment Targets
        You can setup any number of environments to allow deployment
        For overriding build properties setup a ${env}.properties files with all override values 
        @see local.properties
    -->
  <!--
    Defaults are common build properties that are setup to configure the 
    bulk of the ant tasks.  These values are used to ensure consistency of 
    all environments including ports and names for app-servers
    @param overrides     - You can override any values here including property file with default values
    @param app-name      - The name used to create the application database, forests, and app-servers
    @param app-user      - The default app-user
    @param app-password  - The default app-password
    @param app-user      - The default app-user
    @param app-password  - The default app-password
    @param xdbc-port     - The default xdbc port commonly used to execute ant tasks or java/.net database against content store
    @param app-port      - The default application port used for http
    @param content-port  - The port used to access the content used for loading and deleting content
    @param modules-port  - The port used to access the modules database
    @param schemas-port  - The port used to accesss the application schemas database
    @param triggers-port - The port used to access the application triggers database
    @param local-server  - Default Server created with local environment
    @param dev-server    - Default Server created with local environment
    @param qa-server     - Default Server created with local environment
    @param prod-server   - Default Server created with local environment
    
  -->
  <target name="init">
    <!--Override Init Properties-->
    <property file="init.properties"/>
    
    <property name="app-name" value="CondeNastDAM"/>
    <property name="app-user" value="admin"/>
    <property name="app-password" value="Soap"/>
    <property name="admin-user" value="admin"/>
    <property name="admin-password" value="Soap"/>

    <property name="app-port"      value="9015"/>
    <property name="xdbc-port"     value="9999"/>
    <!--
      Default Server Names
      Should be overriden in init to preserve 
      build structure
    -->
    <property name="local-server" value="localhost"/>
    <property name="dev-server" value="devserver"/>
    <property name="qa-server" value="qa-server"/>
    <property name="prod-server" value="prod-server"/> 
  </target> 
  <!--
    =================================================================
    Initializes config for current environment and write init values 
    =================================================================
  -->
  <target name="init-config" description="Writes configuration changes from the template configuration">
    <copy file="${basedir}/db-config/db-config.xml" tofile="${basedir}/db-config/${env-prefix}-db-config.xml"/>
    <replaceregexp file="${basedir}/db-config/${env-prefix}-db-config.xml" match="%app-name%"      replace="${app-name}" flags="gm"/>
    <replaceregexp file="${basedir}/db-config/${env-prefix}-db-config.xml" match="%app-user%"      replace="${app-user}"  flags="gm"/>
    <replaceregexp file="${basedir}/db-config/${env-prefix}-db-config.xml" match="%app-password%"  replace="${app-password}" flags="gm"/>
    <replaceregexp file="${basedir}/db-config/${env-prefix}-db-config.xml" match="%xdbc-port%"     replace="${xdbc-port}"  flags="gm"/>
    <replaceregexp file="${basedir}/db-config/${env-prefix}-db-config.xml" match="%app-port%"      replace="${app-port}"  flags="gm"/>
    <replaceregexp file="${basedir}/db-config/${env-prefix}-db-config.xml" match="%content-port%" replace="${content-port}"  flags="gm"/>
    <replaceregexp file="${basedir}/db-config/${env-prefix}-db-config.xml" match="%modules-port%" replace="${modules-port}"  flags="gm"/>
    <replaceregexp file="${basedir}/db-config/${env-prefix}-db-config.xml" match="%schemas-port%" replace="${schemas-port}" flags="gm"/>
    <replaceregexp file="${basedir}/db-config/${env-prefix}-db-config.xml" match="%triggers-port%" replace="${triggers-port}" flags="gm"/>    
    <replaceregexp file="${basedir}/db-config/${env-prefix}-db-config.xml" match="%loader-port%" replace="${loader-port}" flags="gm"/>
  </target> 
  <!--
    Local is usually for running on your local Machine
  -->
  <target name="local" depends="init">
    <!-- overrules, optional -->
    <property file="local.properties" />
    <!-- defaults allows for override in properties -->
    <property name="local" value="local"/>
    <property name="env-prefix" value="local"/>
    <property name="server" value="${local-server}"/>
    
    <property name="ml.admin.uri" value="http://${server}:8001"/>
    <property name="ml.admin.user" value="${admin-user}"/>
    <property name="ml.admin.password" value="${admin-password}"/>
    <property name="ml.ingest.user" value="default-user"/>
    <property name="ml.ingest.password" value="default-user"/>
     
    <property name="appserver-name" value="${app-name}-${app-port}"/>
    <property name="app-server" value="http://${server}:${app-port}/"/>
    <property name="app-dav" value="http://${server}:${content-port}/"/>
    <property name="modules-dav" value="http://${server}:${modules-port}/"/>
    <property name="schemas-dav" value="http://${server}:${schemas-port}/"/>
    <property name="dav.user" value="admin"/>
    <property name="dav.password" value="admin"/>
    <property name="modules.user" value="validator-modules-deployer"/>
    <property name="modules.password" value="deployer"/>
    <property name="content.user" value="validator-content-loader"/>
    <property name="content.password" value="content"/>
    <property name="xcc" value="xcc://${admin-user}:${admin-password}@${server}:${xdbc-port}/${app-name}"/>
  </target>

  <!--Development Target-->
  <target name="dev"  depends="init">
    <!-- overrules, optional -->
    <property file="dev.properties" />
    
    <!-- defaults allows for override in properties -->
    <property name="env-prefix" value="dev"/>
    <property name="dev" value="dev"/>
    <property name="server" value="${dev-server}"/>
    <property name="ml.admin.uri" value="http://${server}:8001"/>
    <property name="ml.admin.user" value="${admin-user}"/>
    <property name="ml.admin.password" value="${admin-password}"/>
    <property name="ml.ingest.user" value="default-user"/>
    <property name="ml.ingest.password" value="default-user"/>
    <property name="appserver-name" value="${app-name}-${app-port}"/>
    <property name="app-server" value="http://${server}:${app-port}/"/>
    <property name="app-dav" value="http://${server}:${content-port}/"/>
    <property name="modules-dav" value="http://${server}:${modules-port}/"/>
    <property name="schemas-dav" value="http://${server}:${schemas-port}/"/>
    <property name="dav.user" value="${admin-user}"/>
    <property name="dav.password" value="${admin-password}"/>
    <property name="xcc" value="xcc://${admin-user}:${admin-password}@${server}:${xdbc-port}/${app-name}"/>
  </target>

  <!--QA Environment Target-->
  <target name="qa" depends="init">
    <!-- overrules, optional -->
    <property file="qa.properties" />
    <!-- defaults allows for override in properties -->
    <property name="env-prefix" value="qa"/>
    <property name="server" value="${qa-server}"/>
    <property name="qa" value="qa"/>
    
    <property name="ml.admin.uri" value="http://${server}:8001"/>
    <property name="ml.admin.user" value="${admin-user}"/>
    <property name="ml.admin.password" value="${admin-password}"/>
    <property name="ml.ingest.user" value="default-user"/>
    <property name="ml.ingest.password" value="default-user"/>
    
    <property name="appserver-name" value="${app-name}-${app-port}"/>
    <property name="app-server" value="http://${server}:${app-port}/"/>
    <property name="app-dav" value="http://${server}:${content-port}/"/>
    <property name="modules-dav" value="http://${server}:${modules-port}/"/>
    <property name="schemas-dav" value="http://${server}:${schemas-port}/"/>
    <property name="dav.user" value="${admin-user}"/>
    <property name="dav.password" value="${admin-password}"/>
    <property name="xcc" value="xcc://${admin-user}:${admin-password}@${server}:${xdbc-port}/${app-name}"/>
  </target>
  
  <!--Production Environment Target-->
  <target name="prod"  depends="init">
    <!-- overrules, optional -->
    <property file="prod.properties" />
    
    <!-- defaults allows for override in properties -->
    <property name="env-prefix" value="prod"/>
    <property name="prod" value="prod"/>
    <property name="server" value="${prod-server}"/>
    
    <property name="ml.admin.uri" value="http://${server}:8001"/>
    <property name="ml.admin.user" value="${admin-user}"/>
    <property name="ml.admin.password" value="${admin-password}"/>
    <property name="ml.ingest.user" value="${app-user}"/>
    <property name="ml.ingest.password" value="${app-password}"/>

    <property name="appserver-name" value="${app-name}-${app-port}"/>
    <property name="app-server" value="http://${server}:${app-port}/"/>
    <property name="app-dav" value="http://${server}:${content-port}/"/>
    <property name="modules-dav" value="http://${server}:${modules-port}/"/>
    <property name="schemas-dav" value="http://${server}:${schemas-port}/"/>
    <property name="dav.user" value="${admin-user}"/>
    <property name="dav.password" value="${admin-password}"/>
    <property name="xcc" value="xcc://${admin-user}:${admin-password}@${server}:${app-port}/${app-name}"/>
    </target>

  
  <!--
    =================================================================
    Deployment Targets
    Are the major application tasks required to deploy 
    software onto MarkLogic environment
    =================================================================
  -->
  
  <!--
    =================================================================
      Useful for debugging properties when using configurations and 
      common properties required to be set to run the application
      =================================================================
  -->
  <target name="echo-properties">
    <fail unless="server">
      Please select an environment to build (qa, dev, prod, local)
      ant {env} {target}
      ex.&gt;ant qa deploy
    </fail>
    
    <echo>App Version ${app.version}.${app.release}</echo>
    <echo/>
    <echo>ML_HOME=${ML_HOME}</echo>
    <echo/>
    <echo>env-prefix=${env-prefix}</echo>
    <echo>server=${server}</echo>
    <echo/>
    <echo>ml.admin.uri=${ml.admin.uri}</echo>
    <echo>ml.admin.user=${ml.admin.user}</echo>
    <echo>ml.admin.password=${ml.admin.password}</echo>
    <echo>ml.ingest.user=${ml.ingest.user}</echo>
    <echo>ml.ingest.password=${ml.ingest.password}</echo>
    <echo>ml.config=${ml.config}</echo>
    <echo/>
    <echo>app-port=${app-port}</echo>
    <echo>app-dav=${app-dav}</echo>
    <echo>modules-dav=${modules-dav}</echo>
    <echo>schemas-dav=${schemas-dav}</echo>
    <echo>dav.user=${dav.user}</echo>
    <echo>dav.password=${dav.password}</echo>
    <echo/>
    <echo>xcc=${xcc}</echo>
  </target>
  
  <!--
    =============================================================
      Bootstrapping MarkLogic Server
      Creates an xquery setup folder in your /Marklogic/admin folder
      and executes the bootstrap configuration located under
      /config directory.
      Bootstrap assumes you are running task from local deployation or accessing via network share
        for remote boostrapping use remote-boostrap-marklogic task
      Requires the ML_HOME property to be set in configuration file
      =============================================================
  -->
  <target name="bootstrap-application" depends="init, init-config"> 
    <fail unless="ML_HOME">Setup your ML_HOME directory</fail>
    <fail unless="server">Please select an environment to run</fail>
      <echo>Configuring Database Scripts</echo>
    <property name="ml.config" value="${basedir}/db-config/${env-prefix}-db-config.xml"/>
    <echo>Creating ML deploy directory</echo>
    <mkdir dir="${ML_HOME}/Admin/deploy"/>
    
    <echo>Copying files to ${ML_HOME}/Admin/deploy</echo>
    <copy todir="${ML_HOME}/Admin/deploy">
      <fileset dir="${basedir}/bootstrap" includes="**/*"/>
    </copy>
    
    <echo>Invoking Database configuration ${ml.config}</echo>
    <httpmpost url="${ml.admin.uri}/deploy/deploy-config.xqy">
      <userCredentials domain="" host="" username="${ml.admin.user}" password="${ml.admin.password}"  />
      <postfile name="config" contentType="application/xml" file="${ml.config}" />
    </httpmpost>
  </target> 
  
  <target name="teardown-application" depends="init, init-config"> 
      <fail unless="ML_HOME">Setup your ML_HOME directory</fail>
      <fail unless="server">Please select an environment to run</fail>
        <echo>Configuring Database Scripts</echo>
      <property name="ml.config" value="${basedir}/db-config/${env-prefix}-db-config.xml"/>
      <echo>Creating ML deploy directory</echo>
      <mkdir dir="${ML_HOME}/Admin/deploy"/>
      
      <echo>Copying files to ${ML_HOME}/Admin/deploy</echo>
      <copy todir="${ML_HOME}/Admin/deploy">
        <fileset dir="${basedir}/bootstrap" includes="**/*"/>
      </copy>
      
      <echo>Tearing Down Application configuration ${ml.config}</echo>
      <httpmpost url="${ml.admin.uri}/deploy/teardown.xqy">
        <userCredentials domain="" host="" username="${ml.admin.user}" password="${ml.admin.password}"  />
        <postfile name="config" contentType="application/xml" file="${ml.config}" />
      </httpmpost>
    </target> 
  <!--
     =============================================================
     Executes a remote bootstrap 
     @see boostrap-marklogic
     =============================================================
  -->
  <target name="remote-bootstrap-marklogic" depends="build-marklogic">
    <fail unless="server">Please select an environment to build (qa, dev, prod, local)
      ant {env} {target}
      ex.&gt;ant qa deploy
    </fail>

      <echo>Update deploy scripts in Modules on ${modules-dav}</echo>
    <davput url="${modules-dav}/bootstrap" userid="${dav.user}" password="${dav.password}" 
      overwrite="true">
      <fileset dir="${basedir}/bootstrap" includes="**/*"/>
    </davput>
    
    <echo>Invoking setup scripts at ${app-server}</echo>
    <!--httpmpost url="${app-server}/bootstrap/deploy-config.xqy"-->
    <!-- the app server doesn't seem to accept understand the call, but with simple local tunnel it does seem to work -->
    <httpmpost url="http://localhost:9999/bootstrap/deploy-config.xqy">
      <!--userCredentials domain="" host="" username="${ml.admin.user}" password="${ml.admin.password}"  /-->
      <postfile name="config" contentType="application/xml" file="${ml.config}" />
    </httpmpost>
  </target> 
  
  <!--
  =============================================================
    Builds the Marklogic Output 
  =============================================================
  -->
  <target name="build-marklogic"> 
    <fail unless="server">Please select an environment to build (qa, dev, prod, local)
      ant {env} {target}
      ex.&gt;ant qa deploy
    </fail>

      <mkdir dir="${xquery.dir}"/>
      <copy todir="${xquery.dir}">
      <fileset dir="${app.dir}"/>
      </copy>
    <mkdir dir="${data.dir}/schemas"/>
    <copy todir="${data.dir}/schemas">
        <fileset dir="${content.dir}/schemas" includes="**/*"/>
    </copy>
    <!-- GR001 -->
    <mkdir dir="${data.dir}/content"/>
    <copy todir="${data.dir}/content">
        <fileset dir="${data.dir}/content" includes="**/*"/>
    </copy>

    <mkdir dir="${output.dir}/${env-prefix}"/>
    <copy todir="${output.dir}/${env-prefix}">
      <fileset dir="${xquery.dir}" includes="**/*"/>
    </copy>
  </target>
  
  <!--
    ========================================================
    Builds the content directory and moves to output
    ========================================================
  -->  
  <target name="build-content"> 
    <fail unless="server">Please select an environment to build (qa, dev, prod, local)
      ant {env} {target}
      ex.>ant qa deploy
    </fail>
    <echo>${content.dir}</echo>
    <mkdir dir="${data.dir}"/>
    <copy todir="${data.dir}">
        <fileset dir="${content.dir}" includes="**/*"/>
    </copy>
  </target>
  <target name="build-all" depends="local, build">
    <mkdir dir="${output.dir}/dev"/>
    <mkdir dir="${output.dir}/qa"/>
    <mkdir dir="${output.dir}/prod"/>
    
    <!--Copy the Output of Xquery+Flex into each env-->
    <copy todir="${output.dir}/dev">
      <fileset dir="${xquery.dir}"/>
    </copy>
    <copy todir="${output.dir}/qa">
      <fileset dir="${xquery.dir}"/>
    </copy>
    <copy todir="${output.dir}/prod">
      <fileset dir="${xquery.dir}"/>
    </copy>
    <copy todir="${output.dir}/zim">
      <fileset dir="${xquery.dir}"/>
    </copy>
  </target>
    <!--
      ========================================================
      Builds Marklogic XDDocs using custom ML Docs libraries
      for more information about ml xqdocs talk to Gary Vidal:-D
        ========================================================
    -->
    <target name="build-xqdocs">
    <mkdir dir="${docs.dir}/xqdocs"/>
      <ml:xqdoc 
        outputdir="${docs.dir}/xqdocs" 
      display="${lib-dir}/xqdoc-display.xqy" 
        version="ml10"
        failonerror="false">
            <fileset dir="${app.dir}" includes="**/*.xqy"/>
      </ml:xqdoc>
  </target>
  
  <!--
  ===============================================================
     Generic build targets 
     
     Convenience methods for calling from Eclipse or IDE
  ===============================================================
  -->
  
  
  <!--Generic Build Target--> 
  <target name="build" depends="echo-properties, build-marklogic, build-content"/>
  
    <!--Targets to build specific environments-->
  <target name="build-local" depends="local, build"/>
  <target name="build-qa" depends="qa, build"/>
  <target name="build-dev" depends="dev, build"/>
  <target name="build-prod" depends="prod, build"/>

  <!--
  ===============================================================
     Create Packages
     Create Output Directory for Deployment and copies all artifacts
     into ZIPs for distribution
  ==================================================================
  -->
  <target name="package" depends="build">
    <fail unless="server">Please select an environment to build (qa, dev, prod, local)
      ant {env} {target}
      ex.>ant qa deploy
    </fail>
    
    <zip destfile="${output.dir}/${env-prefix}-modules.zip" basedir="${output.dir}/${env-prefix}" includes="**/*" excludes=""/>
    <zip destfile="${output.dir}/setup-data.zip" basedir="${content.dir}/content" includes="**/*"/>
    <zip destfile="${output.dir}/docs.zip" basedir="${docs.dir}" includes="**/*"/>
  </target>
  
  <target name="package-all" depends="build-all">
    <fail unless="server">Please select an environment to build (qa, dev, prod, local)
      ant {env} {target}
      ex.>ant qa deploy
    </fail>
    
    <!--zip the files for each Environment-->
    <zip destfile="${output.dir}/dev-${app.release}.${app.version}.zip" basedir="${output.dir}/dev" includes="**/*" excludes=""/>
    <zip destfile="${output.dir}/qa-${app.release}.${app.version}.zip" basedir="${output.dir}/qa" includes="**/*" excludes=""/>
    <zip destfile="${output.dir}/prod-${app.release}.${app.version}.zip" basedir="${output.dir}/prod" includes="**/*" excludes=""/>
  </target>
  
  <!--
    ==================================================================
      Convenience Deploy features targeting individual environments
    ==================================================================
  -->
  <target name="deploy" depends="build,deploy-marklogic"/>
  <target name="deploy-local" depends="local,deploy"/>
  <target name="deploy-dev" depends="dev,deploy"/>
  <target name="deploy-qa" depends="qa,deploy"/>
    <target name="deploy-prod" depends="prod,deploy"/>

    <!--
      ==========================================================
      Deploys build artifacts to environment (Server)
      Deployment usually consists of the following:
      Loading Modules into DB
        Loading Schemas into DB
        Loading Triggers into DB
        Configuring CPF Pipelines
        Loading Content
        Executing Scripts
      ==========================================================
    -->
  <target name="deploy-marklogic" depends="build-marklogic, deploy-content">
    <fail unless="server">Please select an environment to build (qa, dev, prod, local)
      ant {env} {target}
      ex.>ant qa deploy
    </fail> 
    
    <echo>Loading Modules to ${modules-dav}</echo>

<!--  
    <davput url="${modules-dav}" userid="${modules.user}" password="${modules.password}" 
      overwrite="true">
      <fileset dir="${output.dir}/modules" includes="**/*" excludes="resources/**/*.js"/>
    </davput>

    <davput url="${modules-dav}/setup" userid="${modules.user}" password="${modules.password}" 
      overwrite="true">
      <fileset dir="${basedir}/bootstrap" includes="**/*"/>
    </davput>   

    <echo>Setting Module Security</echo>
    <ml:query xccurl="${xcc}" failonerror="true" output="output.txt">
        <fileset file="${basedir}/bootstrap/initialize-filesystem.xqy"/>
    </ml:query>  
-->
   
    <!--Used this Target to configure Document Library Services-->
   <!-- 
    <echo>Configuring DLS</echo>
    <ml:invoke xccurl="${xcc}" moduleuri="/bootstrap/dls-config.xqy"/>-->
    </target>
    
  <!--
    ====================================================================
    Deploys Schemas to Marklogic Schemas or Application Schemas Database
      ====================================================================
  -->
    <target name="deploy-schemas" depends="build-marklogic">
    <echo>Loading Schemas to ${schemas-dav}</echo>
    <davput url="${schemas-dav}" userid="${dav.user}" password="${dav.password}" 
      overwrite="true" >
      <fileset dir="${data.dir}/schemas" includes="**/*.xsd"/>
    </davput>
    </target>

  <target name="deploy-cpf" depends="deploy-marklogic">
    <!--Use this entry to configure CPF-->
    <echo>Deploying/Configuring CPF</echo>
    <ml:invoke xccurl="${xcc}" moduleuri="/setup/cpf-config.xqy"/>
  </target> 
  
  <target name="deploy-task" depends="deploy-marklogic">
  <echo>Deploying Scheduled Tasks</echo>
    <ml:invoke xccurl="${xcc}" moduleuri="/setup/create-tasks.xqy"/>
  </target>
    <!--
    ====================================================================
    Separate Target to deploy content
    Put any custom content loading tasks here 
      ====================================================================
  -->
  <target name="deploy-content" depends="">
    <fail unless="server">Please select an environment to build (qa, dev, prod, local)
      ant {env} {target}
      ex.>ant qa deploy
    </fail>
    <echo>${xcc}</echo>
     <ml:load xccurl="${xcc}">
       <ml:docset destdir="/">
         <fileset dir="../data/content" includes="**/*" />                
       </ml:docset>
     </ml:load>
    
    <!-- 
    <ml:query xccurl="${xcc}" query='
      let $permissions := (
         xdmp:permission("validator-modules","read"),
         xdmp:permission("validator-modules","insert"),
         xdmp:permission("validator-modules","update"),
         xdmp:permission("validator-modules","execute")
       )
      return
      if(xdmp:document-properties("/")) then
         xdmp:document-set-permissions("/",$permissions)
      else 
         xdmp:directory-create("/",$permissions)
    '/>
    <echo>Loading Data: ${app-dav} from ${content.dir} </echo>
  
    <davput url="${app-dav}/" userid="${content.user}" password="${content.password}" 
      overwrite="true">
      <fileset dir="${content.dir}/" includes="**/*"/>
    </davput>
     -->

  </target>   
  
  <!--
  ===============================================================
    Targets to clean intermediate results
  ==================================================================
  -->
  <target name="undeploy-marklogic">
    <fail unless="server">Please select an environment to build (qa, dev, prod, local)
      ant {env} {target}
      ex.>ant qa deploy
    </fail>
    <fail if="prod">You cannot run undeploy on production environment</fail>
    <mkdir dir="${ML_HOME}/Admin/deploy"/>
    <copy todir="${ML_HOME}/Admin/deploy">
      <fileset dir="bootstrap" includes="**/*"/>
    </copy>
    <httpget url="${ml.admin.uri}/deploy/wipe-config.xqy">
      <userCredentials domain="" host="" username="${ml.admin.user}" password="${ml.admin.password}"  />
    </httpget>
    </target>

  <!--
    ======================================================================= 
    Clean Targets  ACHTUNG!!!! 
    these tasks are very dangerous and should be used with care.
    System will prevent being run on production environment
    =======================================================================
  -->
  
  <!-- Clean out databases in Marklogic -->
  <target name="clean-marklogic">
    <fail unless="server">Please select an environment to build (qa, dev, prod, local)
      ant {env} {target}
      ex.>ant qa deploy
    </fail>
    <fail if="prod">You cannot run target on production environment</fail>
    <!-- non-existing databases are silently ignored -->
    <clear-ml-database name="${$app-name}"/>
    <clear-ml-database name="${app-name}-triggers"/>
    <clear-ml-database name="${app-name}-modules"/>
    <clear-ml-database name="${app-name}-schemas"/>
    </target>
    <!-- Clean out databases in Marklogic -->
    <target name="clean-modules">
      <fail unless="server">Please select an environment to build (qa, dev, prod, local)
        ant {env} {target}
        ex.>ant qa deploy
      </fail>
      <fail if="prod">You cannot run target on production environment</fail>
      <!-- non-existing databases are silently ignored -->
      <clear-ml-database name="${app-name}-modules"/>
   </target>  
  <!--
    =====================================================
    Wipes all data from your application database
    =====================================================
  -->
  <target name="clean-content">   
    <fail unless="server">Please select an environment to build (qa, dev, prod, local)
      ant {env} {target}
      ex.>ant qa deploy
    </fail>
    <fail if="prod">You cannot run target on production environment</fail>
    <!-- non-existing databases are silently ignored -->
    <clear-ml-database name="${app-name}"/>
    </target>

    <!--
      ======================================================
      Cleans output Directory
        ======================================================
    -->
  <target name="clean" depends="clean-output" />
  
  <!--
    ======================================================
    WARNING:Cleans out the whole application from then entire database
    Should be only used for dev and local environments
    ======================================================
  -->
  <target name="clean-all" depends="clean-output, clean-marklogic, clean-content" />

    <!--Clean the Output Directory--> 
  <target name="clean-output">
    <delete includeemptydirs="true" failonerror="false">
      <fileset dir="${output.dir}" includes="**/*" />
    </delete>
  </target>
  <!--
    ===========================================================
    Macros used in build for Marklogic Project
  Shows various ways ML Ant Tasks can be used to create 
  custom macros and specialized build scripts for common patterns
  ==========================================================
  -->
  
  <!--
    ===========================================================
    Enables a marklogic App-Server
    ===========================================================
  -->
  <macrodef name="enable-appserver">
    <attribute name="enable"/>
    <attribute name="server"/>
    <sequential>
      <ml:query xccurl="${xcc}" query='
        xquery version "1.0-ml";

          import module namespace admin = "http://marklogic.com/xdmp/admin" 
              at "/MarkLogic/admin.xqy";

          let $config := admin:get-configuration()
          let $groupid := admin:group-get-id($config, "Default")
          let $config :=
          admin:appserver-set-enabled($config, 
                 admin:appserver-get-id($config, $groupid, "@{server}"),
                 @{enable})
        return
          admin:save-configuration($config)
        '/>
    </sequential>
  </macrodef>
  
  <!--
    ======================================================
    Checks the task queue for pending work and sleeps an amount of time before checking again
    Will complete when the task-queue is 0
    Often helpful when CPF steps need serial execution.
    ======================================================
  -->
  <macrodef name="check-ml-task-queue">
    <attribute name="duration"/>
    <sequential>
      <ml:query xccurl="${xcc}" query='
        xquery version "1.0-ml";
        declare namespace ss="http://marklogic.com/xdmp/status/server";

        (: copied from unit-test.xqy :)
    declare function local:wait-for-taskserver($sleep) {
          let $group-servers := xdmp:group-servers(xdmp:group())
          let $task-server := xdmp:server("TaskServer")[. = $group-servers]
          let $status := xdmp:server-status(xdmp:host(), $task-server)
          let $queue-size as xs:unsignedInt := $status/ss:queue-size
          let $active-requests as xs:unsignedInt := fn:count($status/ss:request-statuses/ss:request-status)
          return
            if ($queue-size = 0 and $active-requests = 0) then ()
            else
            (
              xdmp:sleep($sleep),
              local:wait-for-taskserver($sleep)
            )
        };
        let $timeout := xdmp:set-request-time-limit(3600)
        return
        local:wait-for-taskserver(@{duration})
      '/>
    </sequential>
  </macrodef> 
  <!--
    ================================================================
    Nasty Macro to kill your databases in Marklogic use with caution
    Most default targets will prevent execution against prod environment
    ================================================================
  -->
  <macrodef name="clear-ml-database">
    <attribute name="name"/>
    <sequential>
      <ml:query xccurl="${xcc}" query="
      xquery version '1.0-ml';
      let $all-databases := 
        for $d in xdmp:databases() return xdmp:database-name($d)
      let $name := '@{name}'
      where $name = $all-databases
      return
        try {
          for $forest in xdmp:database-forests(xdmp:database($name))
          return
            xdmp:forest-clear($forest),
          fn:concat('Cleared database ', $name)
        } catch ($e) {
          fn:concat('Failed to clear database ', $name, ': ', fn:string($e//*:format-string))
        };
      
      xdmp:sleep(1000);

      (: Force ML to create new forest by creating root dir :)
      let $all-databases := for $d in xdmp:databases() return xdmp:database-name($d)
      let $name := '@{name}'
      where $name = $all-databases
      return
        try {
          xdmp:eval('xdmp:directory-create(&quot;/&quot;)', (), &lt;options xmlns='xdmp:eval'>&lt;database>{xdmp:database($name)}&lt;/database>&lt;/options>)
        } catch ($e) {
          fn:concat('Failed to recreate database ', $name, ': ', fn:string($e//*:format-string))
        };
        '@{name}'
      "/>
    </sequential>
  </macrodef>
  
</project>